name: Build rwProcMem33 Module for OnePlus Pad 2 Pro

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  KERNEL_VERSION: "6.6"
  ANDROID_VERSION: "15"
  TARGET_DEVICE: "OnePlus Pad 2 Pro (OPD2413)"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        kernel_source: 
          - "https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8750.git"
          - "https://github.com/LineageOS/android_kernel_oneplus_sm8750.git"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get clean
        df -h
        
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential git bc bison flex libssl-dev libncurses5-dev \
          curl wget unzip python3 python3-pip \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          crossbuild-essential-arm64
        
        # ÊòæÁ§∫Â∑•ÂÖ∑ÁâàÊú¨
        aarch64-linux-gnu-gcc --version
        echo "Build environment ready"
        
    - name: Setup toolchain
      run: |
        # ‰ΩøÁî®Á≥ªÁªüËá™Â∏¶ÁöÑ‰∫§ÂèâÁºñËØëÂ∑•ÂÖ∑ÈìæÔºåÊõ¥Á®≥ÂÆö
        export CROSS_COMPILE=aarch64-linux-gnu-
        export ARCH=arm64
        
        echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "ARCH=arm64" >> $GITHUB_ENV
        
        # È™åËØÅÂ∑•ÂÖ∑Èìæ
        aarch64-linux-gnu-gcc --version
        which aarch64-linux-gnu-gcc
        
    - name: Download kernel source
      run: |
        echo "=== Downloading kernel source ==="
        echo "Trying source: ${{ matrix.kernel_source }}"
        
        # ‰∏ãËΩΩÂÜÖÊ†∏Ê∫êÁ†Å
        if git clone --depth=1 --single-branch ${{ matrix.kernel_source }} kernel_source; then
          echo "‚úì Successfully cloned kernel source"
        else
          echo "‚úó Failed to clone from ${{ matrix.kernel_source }}"
          
          # Â§áÁî®ÊñπÊ°àÔºö‰ΩøÁî®ÈÄöÁî®AndroidÂÜÖÊ†∏
          echo "Trying generic Android kernel..."
          git clone --depth=1 https://github.com/aosp-mirror/kernel_common.git kernel_source
        fi
        
        cd kernel_source
        echo "Kernel source info:"
        echo "- Repository: $(git config --get remote.origin.url)"
        echo "- Latest commit: $(git log --oneline -1)"
        echo "- Available configs:"
        find arch/arm64/configs/ -name "*.config" -o -name "*defconfig" | head -10 || echo "No configs found"
        
        # Ê£ÄÊü•ÂÜÖÊ†∏ÁâàÊú¨
        if [ -f Makefile ]; then
          echo "- Kernel version: $(make kernelversion 2>/dev/null || echo 'unknown')"
        fi
        
    - name: Prepare kernel config
      run: |
        cd kernel_source
        
        echo "=== Preparing kernel configuration ==="
        
        # Êü•ÊâæÂèØÁî®ÁöÑÈÖçÁΩÆÊñá‰ª∂
        echo "Available ARM64 configs:"
        find arch/arm64/configs/ -name "*.config" -o -name "*defconfig" | sort
        
        # ÈÄâÊã©ÈÖçÁΩÆÊñá‰ª∂ÁöÑ‰ºòÂÖàÁ∫ß
        CONFIG_FILE=""
        for config in "oneplus_defconfig" "gki_defconfig" "defconfig"; do
          if [ -f "arch/arm64/configs/$config" ]; then
            CONFIG_FILE="$config"
            echo "Selected config: $CONFIG_FILE"
            break
          fi
        done
        
        if [ -z "$CONFIG_FILE" ]; then
          echo "No suitable config found, using default"
          CONFIG_FILE="defconfig"
        fi
        
        # Â∫îÁî®ÈÖçÁΩÆ
        echo "Applying kernel config: $CONFIG_FILE"
        make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE $CONFIG_FILE
        
        # ‰øÆÊîπÈÖçÁΩÆ‰ª•ÊîØÊåÅÊ®°ÂùóÁºñËØë
        echo "Configuring for module support..."
        
        # ‰ΩøÁî®sedÁõ¥Êé•‰øÆÊîπ.configÊñá‰ª∂ÔºåÊõ¥ÂèØÈù†
        sed -i 's/# CONFIG_MODULES is not set/CONFIG_MODULES=y/' .config || true
        echo "CONFIG_MODULES=y" >> .config
        echo "CONFIG_MODULE_UNLOAD=y" >> .config
        echo "# CONFIG_MODVERSIONS is not set" >> .config
        echo "# CONFIG_MODULE_SIG is not set" >> .config
        echo "# CONFIG_MODULE_SIG_FORCE is not set" >> .config
        
        # ËøêË°åoldconfigÊù•Â§ÑÁêÜ‰æùËµñ
        yes "" | make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE oldconfig
        
        echo "‚úì Kernel configuration completed"
        
    - name: Prepare kernel for modules
      run: |
        cd kernel_source
        
        echo "=== Preparing kernel for module compilation ==="
        
        # ÂáÜÂ§áÂÜÖÊ†∏‰ª•ÊîØÊåÅÂ§ñÈÉ®Ê®°ÂùóÁºñËØë
        echo "Running modules_prepare..."
        if ! make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE modules_prepare; then
          echo "modules_prepare failed, trying scripts_basic + prepare..."
          make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE scripts_basic
          make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE prepare
        fi
        
        # Á°Æ‰øùÂÖ≥ÈîÆÊñá‰ª∂Â≠òÂú®
        if [ ! -f scripts/mod/modpost ]; then
          echo "Building modpost..."
          make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE scripts
        fi
        
        echo "‚úì Kernel preparation completed"
        
    - name: Create optimized Makefile
      run: |
        cd rwProcMem33Module/rwProcMem_module
        
        # Â§á‰ªΩÂéüÂßãMakefile
        [ -f Makefile ] && cp Makefile Makefile.original
        
        # ÂàõÂª∫‰ºòÂåñÁöÑMakefile
        cat > Makefile << 'EOF'
# OnePlus Pad 2 Pro Kernel Module - Optimized Makefile
KDIR := $(PWD)/../../kernel_source

obj-m := rwProcMem_module.o

# ÂÖºÂÆπÊÄßÊ†áÂøó
ccflags-y += -DANDROID_VERSION=150000
ccflags-y += -DPLATFORM_VERSION=15
ccflags-y += -D__ANDROID__=1
ccflags-y += -DCONFIG_ARM64=1

# Á¶ÅÁî®ÊúâÈóÆÈ¢òÁöÑÊ£ÄÊü•
ccflags-y += -Wno-error
ccflags-y += -Wno-implicit-function-declaration
ccflags-y += -Wno-incompatible-pointer-types
ccflags-y += -Wno-int-conversion
ccflags-y += -Wno-format
ccflags-y += -Wno-unused-variable
ccflags-y += -Wno-unused-function

# ÂÜÖÊ†∏ÂÖºÂÆπÊÄß
ccflags-y += -fno-pic
ccflags-y += -fno-pie

# Ë∞ÉËØïÊ†áÂøó
ifdef DEBUG
ccflags-y += -DDEBUG=1
endif

all:
	@echo "=== Building rwProcMem_module.ko ==="
	@echo "Target: OnePlus Pad 2 Pro (OPD2413)"
	@echo "Kernel: $(shell cd $(KDIR) && make kernelversion 2>/dev/null || echo 'unknown')"
	@echo "Cross compiler: $(CROSS_COMPILE)gcc"
	$(MAKE) -C $(KDIR) M=$(PWD) \
		ARCH=$(ARCH) \
		CROSS_COMPILE=$(CROSS_COMPILE) \
		CONFIG_MODULE_SIG= \
		CONFIG_MODVERSIONS= \
		modules

clean:
	$(MAKE) -C $(KDIR) M=$(PWD) \
		ARCH=$(ARCH) \
		CROSS_COMPILE=$(CROSS_COMPILE) \
		clean

install: all
	@echo "Module ready for installation"

.PHONY: all clean install
EOF
        
        echo "‚úì Makefile created"
        
    - name: Build kernel module
      run: |
        cd rwProcMem33Module/rwProcMem_module
        
        echo "=== Starting module compilation ==="
        echo "Working directory: $(pwd)"
        echo "Environment:"
        echo "  ARCH=$ARCH"
        echo "  CROSS_COMPILE=$CROSS_COMPILE"
        echo "  Kernel source: $(readlink -f ../../kernel_source)"
        
        # È™åËØÅÁºñËØëÁéØÂ¢É
        echo "Compiler check:"
        ${CROSS_COMPILE}gcc --version | head -1
        
        echo "Kernel source check:"
        ls -la ../../kernel_source/
        
        echo "Module source files:"
        ls -la *.c *.h
        
        # Á¨¨‰∏ÄÊ¨°Â∞ùËØïÔºö‰ΩøÁî®Êàë‰ª¨ÁöÑMakefile
        echo "=== Attempt 1: Using custom Makefile ==="
        if make all; then
          echo "‚úì Compilation successful with custom Makefile"
        else
          echo "‚úó Custom Makefile failed, trying fallbacks..."
          
          # Á¨¨‰∫åÊ¨°Â∞ùËØïÔºö‰ΩøÁî®ÂéüÂßãMakefile
          if [ -f Makefile.original ]; then
            echo "=== Attempt 2: Using original Makefile ==="
            cp Makefile.original Makefile
            if make all; then
              echo "‚úì Compilation successful with original Makefile"
            fi
          fi
          
          # Á¨¨‰∏âÊ¨°Â∞ùËØïÔºöÁõ¥Êé•‰ΩøÁî®ÂÜÖÊ†∏ÊûÑÂª∫Á≥ªÁªü
          if [ ! -f rwProcMem_module.ko ]; then
            echo "=== Attempt 3: Direct kernel build ==="
            cd ../../kernel_source
            
            # ÂàõÂª∫‰∏Ä‰∏™‰∏¥Êó∂ÁöÑÊ®°ÂùóÁõÆÂΩïÈìæÊé•
            ln -sf ../rwProcMem33Module/rwProcMem_module ./temp_module
            
            # Áõ¥Êé•ÁºñËØë
            make ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE M=temp_module modules
            
            # Â§çÂà∂ÁªìÊûú
            if [ -f temp_module/rwProcMem_module.ko ]; then
              cp temp_module/rwProcMem_module.ko ../rwProcMem33Module/rwProcMem_module/
            fi
            
            rm -f temp_module
            cd ../rwProcMem33Module/rwProcMem_module
          fi
          
          # Á¨¨ÂõõÊ¨°Â∞ùËØïÔºöÁÆÄÂåñÁºñËØë
          if [ ! -f rwProcMem_module.ko ]; then
            echo "=== Attempt 4: Simplified compilation ==="
            
            cat > simple_Makefile << 'EOF'
obj-m := rwProcMem_module.o
KDIR := ../../kernel_source

all:
	$(MAKE) -C $(KDIR) M=$(PWD) modules

clean:
	$(MAKE) -C $(KDIR) M=$(PWD) clean
EOF
            
            make -f simple_Makefile ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE
          fi
        fi
        
        # È™åËØÅÁºñËØëÁªìÊûú
        if [ -f rwProcMem_module.ko ]; then
          echo "üéâ SUCCESS: Module compiled successfully!"
          echo ""
          echo "Module information:"
          file rwProcMem_module.ko
          ls -lh rwProcMem_module.ko
          
          # Â∞ùËØïËé∑ÂèñÊ®°Âùó‰ø°ÊÅØ
          if command -v modinfo >/dev/null 2>&1; then
            echo ""
            echo "Module details:"
            modinfo rwProcMem_module.ko || echo "Could not get module info"
          fi
          
        else
          echo "‚ùå FAILED: No .ko file generated"
          echo ""
          echo "Build artifacts:"
          ls -la
          echo ""
          echo "Checking for partial builds:"
          find . -name "*.o" -o -name "*.mod*" | head -10
          
          exit 1
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: rwProcMem33-module-${{ github.run_number }}
        path: |
          rwProcMem33Module/rwProcMem_module/*.ko
          rwProcMem33Module/rwProcMem_module/Module.symvers
        retention-days: 30
          
    - name: Create release info
      if: success()
      run: |
        cd rwProcMem33Module/rwProcMem_module
        
        if [ -f rwProcMem_module.ko ]; then
          echo "# ${{ env.TARGET_DEVICE }} Kernel Module Build Report" > build_info.txt
          echo "## Build Information" >> build_info.txt
          echo "- **Device**: ${{ env.TARGET_DEVICE }}" >> build_info.txt
          echo "- **Kernel Version**: ${{ env.KERNEL_VERSION }}" >> build_info.txt
          echo "- **Android Version**: ${{ env.ANDROID_VERSION }}" >> build_info.txt
          echo "- **Architecture**: arm64" >> build_info.txt
          echo "- **Build Date**: $(date -u)" >> build_info.txt
          echo "- **Build Number**: ${{ github.run_number }}" >> build_info.txt
          echo "- **Commit**: ${{ github.sha }}" >> build_info.txt
          echo "" >> build_info.txt
          
          echo "## Compiler Information" >> build_info.txt
          echo '```' >> build_info.txt
          ${CROSS_COMPILE}gcc --version | head -3 >> build_info.txt
          echo '```' >> build_info.txt
          echo "" >> build_info.txt
          
          echo "## Kernel Source" >> build_info.txt
          cd ../../kernel_source
          echo "- **Repository**: $(git config --get remote.origin.url)" >> ../rwProcMem33Module/rwProcMem_module/build_info.txt
          echo "- **Latest Commit**: $(git log --oneline -1)" >> ../rwProcMem33Module/rwProcMem_module/build_info.txt
          echo "- **Branch**: $(git branch --show-current 2>/dev/null || echo 'detached')" >> ../rwProcMem33Module/rwProcMem_module/build_info.txt
          cd ../rwProcMem33Module/rwProcMem_module
          echo "" >> build_info.txt
          
          echo "## Module Information" >> build_info.txt
          echo "- **File Size**: $(stat -c%s rwProcMem_module.ko) bytes" >> build_info.txt
          echo "- **File Hash**: $(sha256sum rwProcMem_module.ko | cut -d' ' -f1)" >> build_info.txt
          echo "" >> build_info.txt
          
          if command -v modinfo >/dev/null 2>&1; then
            echo "## Module Details" >> build_info.txt
            echo '```' >> build_info.txt
            modinfo rwProcMem_module.ko >> build_info.txt 2>/dev/null || echo "Module info not available" >> build_info.txt
            echo '```' >> build_info.txt
          fi
          
          echo "" >> build_info.txt
          echo "## Installation Instructions" >> build_info.txt
          echo "1. Download the module: \`rwProcMem_module.ko\`" >> build_info.txt
          echo "2. Push to device: \`adb push rwProcMem_module.ko /data/local/tmp/\`" >> build_info.txt
          echo "3. Load module: \`adb shell su -c 'insmod /data/local/tmp/rwProcMem_module.ko'\`" >> build_info.txt
          echo "4. Verify: \`adb shell lsmod | grep rwProcMem\`" >> build_info.txt
          
        else
          echo "ERROR: rwProcMem_module.ko not found!" > build_info.txt
        fi
        
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: rwProcMem33Module/rwProcMem_module/build_info.txt